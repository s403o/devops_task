apiVersion: apps/v1
kind: Deployment
metadata:
  name: flask-app
  labels:
    app.kubernetes.io/name: flask-app
    log-format: json
spec:
  revisionHistoryLimit: 5
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: flask-app
  template:
    metadata:
      labels:
        app.kubernetes.io/name: flask-app
    spec:
      terminationGracePeriodSeconds: 600
      containers:
      - name: flask-app
        image: s403o/flaskapp
        imagePullPolicy: Always
        # Command: ["python"]
        # args: ["app.py"]
        ports:
        - containerPort: 5000
          name: flask-app-port
          protocol: TCP
        envFrom:
        - configMapRef:
            name: flask-app-config
        lifecycle:
          preStop:
            exec:
              command: ["bash", "-c", "'kill -s TERM 1&; sleep 1 && kill -s TERM 1'"]
      volumes:
      - name: app-data
        emptyDir: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb
  labels:
    app.kubernetes.io/name: mongodb
    log-format: json
spec:
  revisionHistoryLimit: 5
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: mongodb
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mongodb
    spec:
      terminationGracePeriodSeconds: 600
      containers:
      - name: mongodb
        image: mongo
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 27017
          name: mongodb-port
          protocol: TCP
        envFrom:
        - configMapRef:
            name: flask-app-config
        volumeMounts:
        - name: mongodb-data
          mountPath: /data/db
      volumes:
      - name: mongodb-data
        emptyDir: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  labels:
    app.kubernetes.io/name: grafana
    log-format: json
spec:
  revisionHistoryLimit: 5
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: grafana
  template:
    metadata:
      labels:
        app.kubernetes.io/name: grafana
    spec:
      terminationGracePeriodSeconds: 600
      containers:
      - name: grafana
        image: grafana/grafana
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 3000
          name: grafana-port
          protocol: TCP
        envFrom:
        - configMapRef:
            name: flask-app-config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  labels:
    app.kubernetes.io/name: prometheus
    log-format: json
spec:
  revisionHistoryLimit: 5
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: prometheus
  template:
    metadata:
      labels:
        app.kubernetes.io/name: prometheus
    spec:
      terminationGracePeriodSeconds: 600
      containers:
      - name: prometheus
        image: prom/prometheus
        imagePullPolicy: IfNotPresent
        args:
        - "--config.file=/etc/prometheus/prometheus.yml"
        - "--web.enable-lifecycle"
        - "--web.external-url=http://0.0.0.0:9090/prometheus"
        ports:
        - containerPort: 9090
          name: prometheus-port
          protocol: TCP
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus/prometheus.yml"
          subPath: prometheus.yml
      volumes:
      - name: prometheus-config
        configMap:
          name: prometheus-config
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: node-exporter
  labels:
    app.kubernetes.io/name: node-exporter
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: node-exporter
  template:
    metadata:
      labels:
        app.kubernetes.io/name: node-exporter
    spec:
      containers:
      - name: node-exporter
        image: prom/node-exporter
        ports:
        - containerPort: 9100
          name: node-exporter
          protocol: TCP
---
